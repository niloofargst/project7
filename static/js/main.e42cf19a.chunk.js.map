{"version":3,"sources":["components/Rules.js","components/Colors.js","components/Solution.js","components/Board.js","components/Game.js","App.js","index.js"],"names":["Rules","props","toogleRules","bind","state","show","this","setState","rulesTitle","style","display","className","onClick","href","React","Component","Colors","allColors","list","map","color","active","activeColor","action","Solution","solutionPegs","solutionClass","isHidden","defeat","victory","playAgain","i","trueRow","length","push","newGame","Board","rows","totalRows","id","pegAction","checkAction","Row","substr","activeRow","rowId","Circles","Pegs","pegId","Peg","indexOf","clase","currentRow","previousRows","Hints","allHints","hintClass","hintArr","hints","prevHints","previousHints","j","CheckBox","OkButton","row","disabled","canCheck","Game","activateColor","setColor","checkRow","colors","Math","floor","random","isArrayFull","JSON","parse","stringify","sort","a","b","console","log","msg","Mastermind","render","document","getElementById","ReactDOM","StrictMode","App"],"mappings":"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","file":"static/js/main.e42cf19a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport class Rules extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.toogleRules = this.toogleRules.bind(this)\r\n        this.state = {\r\n            show: true,\r\n        }\r\n    }\r\n\r\n    toogleRules() {\r\n        this.setState({\r\n            show: this.state.show ? false : true,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const link = 'https://en.wikipedia.org/wiki/Mastermind_(board_game)';\r\n        const rulesTitle = this.state.show ? 'Show Rules' : 'Hide Rules';\r\n        const style = {\r\n            display: this.state.show ? 'none' : 'block',\r\n        }\r\n\r\n        return (\r\n            <div className='rules'>\r\n                <h3 onClick={this.toogleRules}> {rulesTitle} </h3>\r\n                <p style={style}> Try to guess the pattern, in both order and\r\n                    color, within ten turns. After submitting a row,\r\n                    a small green squared is show for each circle\r\n                    in a correct position and color. A yellow square\r\n                    indicates the existence of a correct color in an\r\n                    incorrect position. <br />\r\n                    More info on <a href={link}>Wikipedia</a>.\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport const Colors = (props) => {\r\n\r\n    const allColors = props.list.map((color) => {\r\n        const active = color === props.activeColor ? 'active' : '';\r\n\r\n        return (\r\n            <div\r\n                className={'color-holder ' + color + ' ' + active}\r\n                key={color}\r\n                onClick={() => { props.action(color) }} >\r\n            </div>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className='colors'>\r\n            {allColors}\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport \"../index.css\"\r\n\r\nexport const Solution = (props) => {\r\n    let solutionPegs = []\r\n    let solutionClass = ''\r\n    const isHidden = (props.state.defeat && !props.state.victory) ? '' : ' hidden'\r\n    const playAgain = (!props.state.defeat && props.state.victory) ? '' : ' hidden'\r\n    for (let i = 0; i < props.state.trueRow.length; i++) {\r\n        solutionClass = props.state.trueRow[i]\r\n        solutionPegs.push(\r\n            <div\r\n                className={'color-holder ' + solutionClass}\r\n                key={'s_' + i}>\r\n            </div>)\r\n    }\r\n    return (\r\n        <div className='solution colors'>\r\n            <div className={isHidden}>\r\n                <p>Solution:</p>\r\n                {solutionPegs}\r\n                <br />\r\n                <button className=\"newGame btn btn-warning\" onClick={props.newGame}> Play Again</button>\r\n            </div>\r\n            <div className={playAgain} >\r\n                <button className=\"newGame btn btn-warning\" onClick={props.newGame}> Play Again</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport class Board extends React.Component {\r\n    render() {\r\n        let rows = [];\r\n        for (let i = 0; i < this.props.state.totalRows; i++) {\r\n            rows.push(\r\n                <Row\r\n                    key={'row_' + i}\r\n                    id={'row_' + i}\r\n                    state={this.props.state}\r\n                    pegAction={this.props.pegAction}\r\n                    checkAction={this.props.checkAction} />\r\n            )\r\n        }\r\n        return (\r\n            <div className='board'>\r\n                {rows}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst Row = (props) => {\r\n    let active = ''\r\n    if (+props.id.substr(4) === props.state.activeRow) {\r\n        active = 'active'\r\n    }\r\n\r\n    return (\r\n        <div className={'row ' + active} id={props.id}>\r\n            <Circles\r\n                rowId={props.id}\r\n                state={props.state}\r\n                pegAction={props.pegAction} />\r\n            <OkButton\r\n                state={props.state}\r\n                rowId={props.id}\r\n                checkAction={props.checkAction} />\r\n            <Hints\r\n                state={props.state}\r\n                rowId={props.id} />\r\n        </div>\r\n    )\r\n}\r\n\r\nclass Circles extends React.Component {\r\n    render() {\r\n        const rowId = this.props.rowId.substr(4)\r\n        let Pegs = []\r\n        for (let i = 0; i < 4; i++) {\r\n            Pegs.push(\r\n                <Peg\r\n                    state={this.props.state}\r\n                    pegAction={this.props.pegAction}\r\n                    key={'p' + rowId + '-' + i}\r\n                    pegId={'p' + rowId + '-' + i} />)\r\n        }\r\n\r\n        return <div className='circles'> {Pegs} </div>\r\n    }\r\n}\r\n\r\n\r\nclass Peg extends React.Component {\r\n    render() {\r\n        const pegId = +this.props.pegId.substr(this.props.pegId.indexOf('-') + 1)\r\n        const rowId = +this.props.pegId.substr(1, this.props.pegId.indexOf('-') - 1)\r\n        let clase = ''\r\n        if (this.props.state.activeRow === rowId) {\r\n            clase = this.props.state.currentRow[pegId]\r\n        } else {\r\n            for (let i in this.props.state.previousRows) {\r\n                if (+i === +rowId) {\r\n                    clase = this.props.state.previousRows[rowId][pegId]\r\n                }\r\n            }\r\n        }\r\n\r\n        return (\r\n            <span\r\n                id={this.props.pegId}\r\n                className={'peg ' + clase}\r\n                onClick={() =>\r\n                    this.props.pegAction(this.props.state.activeColor, this.props.pegId)} >\r\n            </span>\r\n        )\r\n    }\r\n}\r\n\r\nconst Hints = (props) => {\r\n    let allHints = []\r\n    let hintClass = ''\r\n    const rowId = +props.rowId.substr(4)\r\n    const hintArr = props.state.hints\r\n    const prevHints = props.state.previousHints\r\n\r\n    for (let i = 0; i < hintArr.length; i++) {\r\n        if (rowId === props.state.activeRow) {\r\n            hintClass = hintArr[i] === 2 ? 'exact' : (hintArr[i] === 1 ? 'partial' : '')\r\n        } else {\r\n            for (let j = 0; j < prevHints.length; j++) {\r\n                if (rowId === j) {\r\n                    hintClass = prevHints[j][i] === 2 ? 'exact' : (prevHints[j][i] === 1 ? 'partial' : '')\r\n                }\r\n            }\r\n        }\r\n\r\n        allHints.push(\r\n            <CheckBox\r\n                hintClass={hintClass}\r\n                key={'h_' + rowId + i}\r\n                id={'h_' + rowId + i} />\r\n        )\r\n    }\r\n    return (\r\n        <div className='hints'>\r\n            {allHints}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst CheckBox = (props) => (\r\n    <span\r\n        className={props.hintClass}\r\n        id={props.id}>\r\n    </span>\r\n)\r\n\r\nconst OkButton = (props) => {\r\n    const row = +props.rowId.substr(4)\r\n    let disabled = 'disabled'\r\n    const doNothing = () => (false)\r\n\r\n    if (props.state.activeRow === row) {\r\n        disabled = props.state.canCheck ? '' : 'disabled'\r\n    }\r\n    const checkAction = disabled === 'disabled' ? doNothing : props.checkAction\r\n\r\n    return (\r\n        <div\r\n            className={'ok-button ' + disabled}\r\n            onClick={checkAction}>\r\n            check!\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { Colors } from \"./Colors\";\r\nimport { Solution } from \"./Solution\";\r\nimport { Board } from \"./Board\";\r\n\r\nexport class Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.activateColor = this.activateColor.bind(this);\r\n        this.setColor = this.setColor.bind(this);\r\n        this.checkRow = this.checkRow.bind(this);\r\n        this.newGame = this.newGame.bind(this);\r\n\r\n        const colors = [\"red\", \"green\", \"blue\", \"orange\", \"purple\"];\r\n        const trueRow = [];\r\n        for (let i = 0; i < 4; i++) {\r\n            trueRow.push(colors[Math.floor(Math.random() * 4) + 1]);\r\n        }\r\n\r\n        this.state = {\r\n            colors: colors,\r\n            activeColor: \"red\",\r\n            previousRows: [],\r\n            previousHints: [],\r\n            currentRow: [\"\", \"\", \"\", \"\"],\r\n            hints: [0, 0, 0, 0],\r\n            activeRow: 0,\r\n            totalRows: 10,\r\n            trueRow: trueRow,\r\n            canCheck: false, //this checks if it's ok to eval currentRow\r\n            victory: false,\r\n            defeat: false\r\n        };\r\n    }\r\n\r\n    activateColor(color) {\r\n        this.setState({\r\n            activeColor: color\r\n        });\r\n    }\r\n\r\n    setColor(color, id) {\r\n        if (this.state.victory) {\r\n            return false;\r\n        }\r\n        const rowId = +id.substr(1, id.indexOf(\"-\") - 1);\r\n        const pegId = +id.substr(id.indexOf(\"-\") + 1);\r\n        let currentRow = this.state.currentRow;\r\n        let isArrayFull = 0;\r\n\r\n        if (this.state.activeRow === rowId && color) {\r\n            currentRow[pegId] = color;\r\n            this.setState({\r\n                currentRow: currentRow\r\n            });\r\n\r\n            /* Checking if currentRow is Full */\r\n            for (let i in currentRow) {\r\n                if (currentRow[i].length > 0) {\r\n                    isArrayFull++;\r\n                }\r\n            }\r\n            if (isArrayFull >= currentRow.length) {\r\n                this.setState({ canCheck: true });\r\n            } else {\r\n                this.setState({ canCheck: false });\r\n            }\r\n        }\r\n    }\r\n\r\n    checkRow() {\r\n        const currentRow = JSON.parse(JSON.stringify(this.state.currentRow));\r\n        const trueRow = JSON.parse(JSON.stringify(this.state.trueRow));\r\n        const hints = this.state.hints;\r\n        const previousHints = this.state.previousHints;\r\n        const previousRows = this.state.previousRows;\r\n\r\n        /* Checking extact matches */\r\n        for (let i = 0; i < 4; i++) {\r\n            if (currentRow[i] === trueRow[i]) {\r\n                hints[i] = 2;\r\n                delete currentRow[i];\r\n                delete trueRow[i];\r\n            }\r\n        }\r\n\r\n        /* Checking partial matches */\r\n        for (let i in currentRow) {\r\n            for (let j in trueRow) {\r\n                if (currentRow[i] === trueRow[j]) {\r\n                    hints[i] = 1;\r\n                    delete currentRow[i];\r\n                    delete trueRow[j];\r\n                }\r\n            }\r\n        }\r\n\r\n        hints.sort((a, b) => b - a);\r\n\r\n        /* checking if player won */\r\n        let victory = true;\r\n        for (let i in hints) {\r\n            if (hints[i] < 2) {\r\n                victory = false;\r\n                break;\r\n            }\r\n        }\r\n\r\n        /* checking if player lost */\r\n        let defeat = this.state.defeat;\r\n        if (this.state.activeRow >= this.state.totalRows - 1) {\r\n            defeat = true;\r\n        }\r\n\r\n        /* updating board */\r\n        previousHints.push(hints);\r\n        previousRows.push(this.state.currentRow);\r\n\r\n        this.setState({\r\n            hints: [0, 0, 0, 0],\r\n            activeRow: this.state.activeRow + 1,\r\n            previousHints: previousHints,\r\n            currentRow: [\"\", \"\", \"\", \"\"],\r\n            previousRows: previousRows,\r\n            canCheck: false,\r\n            victory: victory,\r\n            defeat: defeat\r\n        });\r\n    }\r\n\r\n    newGame() {\r\n        const trueRow = [];\r\n        for (let i = 0; i < 4; i++) {\r\n            trueRow.push(this.state.colors[Math.floor(Math.random() * 4) + 1]);\r\n        }\r\n\r\n        console.log(\"new Game\");\r\n        this.setState({\r\n            activeRow: 0,\r\n            previousRows: [],\r\n            previousHints: [],\r\n            currentRow: [\"\", \"\", \"\", \"\"],\r\n            hints: [0, 0, 0, 0],\r\n            trueRow: trueRow,\r\n            canCheck: false,\r\n            victory: false,\r\n            defeat: false\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let msg = this.state.victory\r\n            ? \"You Win!!\"\r\n            : this.state.defeat\r\n                ? \"You Lost :(\"\r\n                : \"\";\r\n        return (\r\n            <div className=\"game-container\">\r\n                <Colors\r\n                    list={this.state.colors}\r\n                    activeColor={this.state.activeColor}\r\n                    action={this.activateColor}\r\n                />\r\n\r\n                <Board\r\n                    state={this.state}\r\n                    pegAction={this.setColor}\r\n                    checkAction={this.checkRow}\r\n                />\r\n\r\n                <p className=\"msg\"> {msg} </p>\r\n                <Solution state={this.state} newGame={this.newGame} />\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport { render } from 'react-dom';\nimport { Rules } from './components/Rules'\nimport { Game } from './components/Game'\nimport './index.css';\n\n\nclass Mastermind extends React.Component {\n  render() {\n    return (\n      <div>\n        <h2 className='titleGame'> Master Mind </h2>\n        <Rules />\n        <Game />\n      </div>\n    );\n  }\n}\n\nrender(\n  <Mastermind />,\n  document.getElementById('root'));\n\nexport default Mastermind;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}